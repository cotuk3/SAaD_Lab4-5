// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAaDLab4_5.DAL.Data.EF;

#nullable disable

namespace SAaDLab4_5.DAL.Migrations
{
    [DbContext(typeof(QuestRoomDbContext))]
    partial class QuestRoomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SAaDLab4_5.DAL.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("SAaDLab4_5.DAL.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("GiftCertificate")
                        .HasColumnType("bit");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QuestId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SAaDLab4_5.DAL.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipantsQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(0)
                        .HasColumnType("money");

                    b.Property<TimeSpan>("TimeToComplete")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.HasKey("Id");

                    b.ToTable("Quests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Quest1",
                            ParticipantsQuantity = 4,
                            Price = 1500m,
                            TimeToComplete = new TimeSpan(0, 1, 30, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Name = "Quest2",
                            ParticipantsQuantity = 2,
                            Price = 2500m,
                            TimeToComplete = new TimeSpan(0, 2, 20, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Name = "Quest3",
                            ParticipantsQuantity = 4,
                            Price = 1250m,
                            TimeToComplete = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Name = "Quest4",
                            ParticipantsQuantity = 4,
                            Price = 1700m,
                            TimeToComplete = new TimeSpan(0, 2, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SAaDLab4_5.DAL.Models.Order", b =>
                {
                    b.HasOne("SAaDLab4_5.DAL.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAaDLab4_5.DAL.Models.Quest", "Quest")
                        .WithMany("Orders")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("SAaDLab4_5.DAL.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SAaDLab4_5.DAL.Models.Quest", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
